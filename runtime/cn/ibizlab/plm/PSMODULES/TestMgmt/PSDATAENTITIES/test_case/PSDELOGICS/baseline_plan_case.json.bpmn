<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:g="http://www.jboss.org/drools/flow/gpd" xmlns:tns="http://www.jboss.org/drools" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" expressionLanguage="http://www.mvel.org/2.0" id="Definition" name="" targetNamespace="http://www.jboss.org/drools" typeLanguage="http://www.java.com/javaTypes">
        <process id="cn.ibizlab.plm.core.testmgmt.service.logic.test_casebaseline_plan_case" isClosed="false" isExecutable="true" name="testmgmt_test_case_baseline_plan_case_ruleFlow" processType="Private" tns:packageName="cn.ibizlab.plm.core.testmgmt.service.logic.test_casebaseline_plan_case">
            <extensionElements>
                <tns:import name="java.util.Map" />
                <tns:import name="org.springframework.util.StringUtils"/>
                <tns:import name="cn.ibizlab.plm.util.helper.RuleUtils"/>
                                <tns:metaData express="" name="test_casebaseline_plan_casedefault" type="entity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.test_case()" name="test_casebaseline_plan_casecase_versions" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.test_case()" name="test_casebaseline_plan_casefor_temp_obj" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.base.domain.version()" name="test_casebaseline_plan_casefor_temp_version_obj" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.test_case()" name="test_casebaseline_plan_casepage" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.base.domain.version()" name="test_casebaseline_plan_caseversion_filter" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.base.domain.version()" name="test_casebaseline_plan_caseversion_page" type="refentity"/>
                                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.testmgmt.service.Itest_caseService))" name="test_caseservice" type="service"/>
                                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.base.service.IversionService))" name="versionservice" type="service"/>
                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.testmgmt.service.Itest_caseService))" name="iBzSysTest_caseDefaultService" type="service"/>
                    <tns:metaData express="T(cn.ibizlab.plm.util.security.AuthenticationUser).getAuthenticationUser()" name="curuser" type="session"/>
                            <tns:global identifier="test_casebaseline_plan_casedefault" type="cn.ibizlab.plm.core.testmgmt.domain.test_case" />
                            <tns:global identifier="test_casebaseline_plan_casecase_versions" type="cn.ibizlab.plm.core.testmgmt.domain.test_case" />
                            <tns:global identifier="test_casebaseline_plan_casefor_temp_obj" type="cn.ibizlab.plm.core.testmgmt.domain.test_case" />
                            <tns:global identifier="test_casebaseline_plan_casefor_temp_version_obj" type="cn.ibizlab.plm.core.base.domain.version" />
                            <tns:global identifier="test_casebaseline_plan_casepage" type="cn.ibizlab.plm.core.testmgmt.domain.test_case" />
                            <tns:global identifier="test_casebaseline_plan_caseversion_filter" type="cn.ibizlab.plm.core.base.domain.version" />
                            <tns:global identifier="test_casebaseline_plan_caseversion_page" type="cn.ibizlab.plm.core.base.domain.version" />
            </extensionElements>
                        <startEvent id="begin" isInterrupting="true"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_casededataset1" id="dedataset1" implementation="http://www.jboss.org/drools/rule" name="选择用例列表"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseloopsubcall1" id="loopsubcall1" implementation="http://www.jboss.org/drools/rule" name="循环子调用"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caserawsfcode1" id="rawsfcode1" implementation="http://www.jboss.org/drools/rule" name="执行脚本代码"/>
                        <endEvent id="rawsfcode1_end" name="end"/>
                        <sequenceFlow id="rawsfcode1_end_line" sourceRef="rawsfcode1" targetRef="rawsfcode1_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseprepareparam1" id="prepareparam1" implementation="http://www.jboss.org/drools/rule" name="准备版本过滤器"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_casededataset2" id="dedataset2" implementation="http://www.jboss.org/drools/rule" name="获取版本数据"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseloopsubcall2" id="loopsubcall2" implementation="http://www.jboss.org/drools/rule" name="循环子调用"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseloopsubcall3" id="loopsubcall3" implementation="http://www.jboss.org/drools/rule" name="循环子调用"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseprepareparam2" id="prepareparam2" implementation="http://www.jboss.org/drools/rule" name="填充当前版本名称"/>
                        <endEvent id="prepareparam2_end" name="end"/>
                        <sequenceFlow id="prepareparam2_end_line" sourceRef="prepareparam2" targetRef="prepareparam2_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseloopsubcall4" id="loopsubcall4" implementation="http://www.jboss.org/drools/rule" name="循环子调用"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseprepareparam3" id="prepareparam3" implementation="http://www.jboss.org/drools/rule" name="准备版本参数"/>
                        <endEvent id="prepareparam3_end" name="end"/>
                        <sequenceFlow id="prepareparam3_end_line" sourceRef="prepareparam3" targetRef="prepareparam3_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="test_casebaseline_plan_caseend1" id="end1" implementation="http://www.jboss.org/drools/rule" name="结束"/>
                        <endEvent id="end1_end" name="end"/>
                        <sequenceFlow id="end1_end_line" sourceRef="end1" targetRef="end1_end"/>
                    <sequenceFlow id="begin_dedataset1" sourceRef="begin" targetRef="dedataset1">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-dedataset1_loopsubcall1" sourceRef="gateway-dedataset1" targetRef="loopsubcall1">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $test_casebaseline_plan_casedefault:test_case();
                                            $test_casebaseline_plan_casecase_versions:test_case();
                                            $test_casebaseline_plan_casefor_temp_obj:test_case();
                                            $test_casebaseline_plan_casefor_temp_version_obj:version();
                                            $test_casebaseline_plan_casepage:test_case();
                                            $test_casebaseline_plan_caseversion_filter:version();
                                            $test_casebaseline_plan_caseversion_page:version();
                                    eval($test_casebaseline_plan_casedefault==test_casebaseline_plan_casedefault && $test_casebaseline_plan_casecase_versions==test_casebaseline_plan_casecase_versions && $test_casebaseline_plan_casefor_temp_obj==test_casebaseline_plan_casefor_temp_obj && $test_casebaseline_plan_casefor_temp_version_obj==test_casebaseline_plan_casefor_temp_version_obj && $test_casebaseline_plan_casepage==test_casebaseline_plan_casepage && $test_casebaseline_plan_caseversion_filter==test_casebaseline_plan_caseversion_filter && $test_casebaseline_plan_caseversion_page==test_casebaseline_plan_caseversion_page);
                                eval((RuleUtils.test($test_casebaseline_plan_casepage.get("size"),"GT","0")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="loopsubcall1_rawsfcode1" sourceRef="loopsubcall1" targetRef="rawsfcode1">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall1_prepareparam1" sourceRef="gateway-loopsubcall1" targetRef="prepareparam1">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $test_casebaseline_plan_casedefault:test_case();
                                            $test_casebaseline_plan_casecase_versions:test_case();
                                            $test_casebaseline_plan_casefor_temp_obj:test_case();
                                            $test_casebaseline_plan_casefor_temp_version_obj:version();
                                            $test_casebaseline_plan_casepage:test_case();
                                            $test_casebaseline_plan_caseversion_filter:version();
                                            $test_casebaseline_plan_caseversion_page:version();
                                    eval($test_casebaseline_plan_casedefault==test_casebaseline_plan_casedefault && $test_casebaseline_plan_casecase_versions==test_casebaseline_plan_casecase_versions && $test_casebaseline_plan_casefor_temp_obj==test_casebaseline_plan_casefor_temp_obj && $test_casebaseline_plan_casefor_temp_version_obj==test_casebaseline_plan_casefor_temp_version_obj && $test_casebaseline_plan_casepage==test_casebaseline_plan_casepage && $test_casebaseline_plan_caseversion_filter==test_casebaseline_plan_caseversion_filter && $test_casebaseline_plan_caseversion_page==test_casebaseline_plan_caseversion_page);
                                eval((RuleUtils.test($test_casebaseline_plan_casecase_versions.get("version_id_in"),"ISNOTNULL","")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall1_loopsubcall4" sourceRef="gateway-loopsubcall1" targetRef="loopsubcall4">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $test_casebaseline_plan_casedefault:test_case();
                                            $test_casebaseline_plan_casecase_versions:test_case();
                                            $test_casebaseline_plan_casefor_temp_obj:test_case();
                                            $test_casebaseline_plan_casefor_temp_version_obj:version();
                                            $test_casebaseline_plan_casepage:test_case();
                                            $test_casebaseline_plan_caseversion_filter:version();
                                            $test_casebaseline_plan_caseversion_page:version();
                                    eval($test_casebaseline_plan_casedefault==test_casebaseline_plan_casedefault && $test_casebaseline_plan_casecase_versions==test_casebaseline_plan_casecase_versions && $test_casebaseline_plan_casefor_temp_obj==test_casebaseline_plan_casefor_temp_obj && $test_casebaseline_plan_casefor_temp_version_obj==test_casebaseline_plan_casefor_temp_version_obj && $test_casebaseline_plan_casepage==test_casebaseline_plan_casepage && $test_casebaseline_plan_caseversion_filter==test_casebaseline_plan_caseversion_filter && $test_casebaseline_plan_caseversion_page==test_casebaseline_plan_caseversion_page);
                                eval((RuleUtils.test($test_casebaseline_plan_casecase_versions.get("version_id_in"),"ISNULL","")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="prepareparam1_dedataset2" sourceRef="prepareparam1" targetRef="dedataset2">
                    </sequenceFlow>
                    <sequenceFlow id="dedataset2_loopsubcall2" sourceRef="dedataset2" targetRef="loopsubcall2">
                    </sequenceFlow>
                    <sequenceFlow id="loopsubcall2_loopsubcall3" sourceRef="loopsubcall2" targetRef="loopsubcall3">
                    </sequenceFlow>
                    <sequenceFlow id="loopsubcall2_loopsubcall4" sourceRef="loopsubcall2" targetRef="loopsubcall4">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall3_prepareparam2" sourceRef="gateway-loopsubcall3" targetRef="prepareparam2">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $test_casebaseline_plan_casedefault:test_case();
                                            $test_casebaseline_plan_casecase_versions:test_case();
                                            $test_casebaseline_plan_casefor_temp_obj:test_case();
                                            $test_casebaseline_plan_casefor_temp_version_obj:version();
                                            $test_casebaseline_plan_casepage:test_case();
                                            $test_casebaseline_plan_caseversion_filter:version();
                                            $test_casebaseline_plan_caseversion_page:version();
                                    eval($test_casebaseline_plan_casedefault==test_casebaseline_plan_casedefault && $test_casebaseline_plan_casecase_versions==test_casebaseline_plan_casecase_versions && $test_casebaseline_plan_casefor_temp_obj==test_casebaseline_plan_casefor_temp_obj && $test_casebaseline_plan_casefor_temp_version_obj==test_casebaseline_plan_casefor_temp_version_obj && $test_casebaseline_plan_casepage==test_casebaseline_plan_casepage && $test_casebaseline_plan_caseversion_filter==test_casebaseline_plan_caseversion_filter && $test_casebaseline_plan_caseversion_page==test_casebaseline_plan_caseversion_page);
                                eval((RuleUtils.test($test_casebaseline_plan_casefor_temp_version_obj.get("id"),"EQ","cur_version_id")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="loopsubcall4_end1" sourceRef="loopsubcall4" targetRef="end1">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall4_prepareparam3" sourceRef="gateway-loopsubcall4" targetRef="prepareparam3">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $test_casebaseline_plan_casedefault:test_case();
                                            $test_casebaseline_plan_casecase_versions:test_case();
                                            $test_casebaseline_plan_casefor_temp_obj:test_case();
                                            $test_casebaseline_plan_casefor_temp_version_obj:version();
                                            $test_casebaseline_plan_casepage:test_case();
                                            $test_casebaseline_plan_caseversion_filter:version();
                                            $test_casebaseline_plan_caseversion_page:version();
                                    eval($test_casebaseline_plan_casedefault==test_casebaseline_plan_casedefault && $test_casebaseline_plan_casecase_versions==test_casebaseline_plan_casecase_versions && $test_casebaseline_plan_casefor_temp_obj==test_casebaseline_plan_casefor_temp_obj && $test_casebaseline_plan_casefor_temp_version_obj==test_casebaseline_plan_casefor_temp_version_obj && $test_casebaseline_plan_casepage==test_casebaseline_plan_casepage && $test_casebaseline_plan_caseversion_filter==test_casebaseline_plan_caseversion_filter && $test_casebaseline_plan_caseversion_page==test_casebaseline_plan_caseversion_page);
                                eval((RuleUtils.test($test_casebaseline_plan_casefor_temp_obj.get("curVersionName"),"ISNULL","")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                            <exclusiveGateway id="gateway-dedataset1" name="Gateway" gatewayDirection="Diverging" default="gateway-dedataset1_end_line"></exclusiveGateway>
                            <sequenceFlow id="dedataset1_gateway-dedataset1_gatewayline" sourceRef="dedataset1" targetRef="gateway-dedataset1"></sequenceFlow>
                            <sequenceFlow id="gateway-dedataset1_end_line" sourceRef="gateway-dedataset1" targetRef="gateway-dedataset1_end"/>
                            <endEvent id="gateway-dedataset1_end" name="end"/>
                            <exclusiveGateway id="gateway-loopsubcall1" name="Gateway" gatewayDirection="Diverging" default="gateway-loopsubcall1_end_line"></exclusiveGateway>
                            <sequenceFlow id="loopsubcall1_gateway-loopsubcall1_gatewayline" sourceRef="loopsubcall1" targetRef="gateway-loopsubcall1"></sequenceFlow>
                            <sequenceFlow id="gateway-loopsubcall1_end_line" sourceRef="gateway-loopsubcall1" targetRef="gateway-loopsubcall1_end"/>
                            <endEvent id="gateway-loopsubcall1_end" name="end"/>
                            <exclusiveGateway id="gateway-loopsubcall3" name="Gateway" gatewayDirection="Diverging" default="gateway-loopsubcall3_end_line"></exclusiveGateway>
                            <sequenceFlow id="loopsubcall3_gateway-loopsubcall3_gatewayline" sourceRef="loopsubcall3" targetRef="gateway-loopsubcall3"></sequenceFlow>
                            <sequenceFlow id="gateway-loopsubcall3_end_line" sourceRef="gateway-loopsubcall3" targetRef="gateway-loopsubcall3_end"/>
                            <endEvent id="gateway-loopsubcall3_end" name="end"/>
                            <exclusiveGateway id="gateway-loopsubcall4" name="Gateway" gatewayDirection="Diverging" default="gateway-loopsubcall4_end_line"></exclusiveGateway>
                            <sequenceFlow id="loopsubcall4_gateway-loopsubcall4_gatewayline" sourceRef="loopsubcall4" targetRef="gateway-loopsubcall4"></sequenceFlow>
                            <sequenceFlow id="gateway-loopsubcall4_end_line" sourceRef="gateway-loopsubcall4" targetRef="gateway-loopsubcall4_end"/>
                            <endEvent id="gateway-loopsubcall4_end" name="end"/>
        </process>
    </definitions>