package cn.ibizlab.plm.testmgmt.logic.runlogic.run_daily_tendencies;
        import java.util.Map;
        import java.util.HashMap;
        import com.alibaba.fastjson.JSONObject;
        import org.springframework.util.StringUtils;
        import org.springframework.util.ObjectUtils;
        import cn.ibizlab.plm.util.errors.BadRequestAlertException;
                global cn.ibizlab.plm.core.testmgmt.domain.run runrun_daily_tendenciesdefault;
                global java.util.Map runrun_daily_tendenciesresult;
        global cn.ibizlab.plm.core.testmgmt.service.IrunService iBzSysRunDefaultService;
        global cn.ibizlab.plm.util.security.AuthenticationUser curuser;


    no-loop

            //逻辑处理节点[开始]
            rule "begin"
            ruleflow-group "runrun_daily_tendenciesbegin"
            when
            then
            end

            //逻辑处理节点[结束]
            rule "end1"
            ruleflow-group "runrun_daily_tendenciesend1"
            when
            then
                        update(runrun_daily_tendenciesdefault);//更新fact中变量值
                        update(runrun_daily_tendenciesresult);//更新fact中变量值
            end

            //逻辑处理节点[每日执行用例趋势]
            rule "rawsqlcall1"
            ruleflow-group "runrun_daily_tendenciesrawsqlcall1"
            when
            then
    Map param =new HashMap();
        param.put("param0",runrun_daily_tendenciesdefault.get("n_create_time_gtandeq"));
        param.put("param1",runrun_daily_tendenciesdefault.get("n_create_time_gtandeq"));
        param.put("param2",runrun_daily_tendenciesdefault.get("n_create_time_gtandeq"));
        param.put("param3",runrun_daily_tendenciesdefault.get("n_create_time_ltandeq"));
        param.put("param4",runrun_daily_tendenciesdefault.get("n_test_library_id_eq"));
        param.put("param5",runrun_daily_tendenciesdefault.get("n_create_time_gtandeq"));
        param.put("param6",runrun_daily_tendenciesdefault.get("n_create_time_ltandeq"));
        param.put("param7",runrun_daily_tendenciesdefault.get("n_plan_id_eq"));
        param.put("param8",runrun_daily_tendenciesdefault.get("n_plan_id_eq"));
        param.put("param9",runrun_daily_tendenciesdefault.get("n_plan_id_eq"));
        param.put("param10",runrun_daily_tendenciesdefault.get("n_executor_id_eq"));
        param.put("param11",runrun_daily_tendenciesdefault.get("n_executor_id_eq"));
        param.put("param12",runrun_daily_tendenciesdefault.get("n_executor_id_eq"));
        param.put("param13",runrun_daily_tendenciesdefault.get("n_executed_at_gtandeq"));
        param.put("param14",runrun_daily_tendenciesdefault.get("n_executed_at_gtandeq"));
        param.put("param15",runrun_daily_tendenciesdefault.get("n_executed_at_ltandeq"));
        param.put("param16",runrun_daily_tendenciesdefault.get("n_executed_at_ltandeq"));
        param.put("param17",runrun_daily_tendenciesdefault.get("n_executed_at_gtandeq"));
        param.put("param18",runrun_daily_tendenciesdefault.get("n_executed_at_gtandeq"));
        param.put("param19",runrun_daily_tendenciesdefault.get("n_status_eq"));
        param.put("param20",runrun_daily_tendenciesdefault.get("n_status_eq"));
        param.put("param21",runrun_daily_tendenciesdefault.get("n_status_eq"));
    String strSql="SELECT     date_series.date AS filter_type,     COALESCE(SUM(CASE WHEN filtered_run_history.status = '10' THEN 1 ELSE 0 END), 0) AS count1, -- 通过     COALESCE(SUM(CASE WHEN filtered_run_history.status = '20' THEN 1 ELSE 0 END), 0) AS count2, -- 受阻     COALESCE(SUM(CASE WHEN filtered_run_history.status = '30' THEN 1 ELSE 0 END), 0) AS count3, -- 失败     COALESCE(SUM(CASE WHEN filtered_run_history.status = '40' THEN 1 ELSE 0 END), 0) AS count4  -- 跳过 FROM (          SELECT DATE_ADD(#{et.param0}, INTERVAL seq.seq DAY) AS date          FROM (                   SELECT a.i+b.i*10+c.i*100 AS seq                   FROM (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,                        (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,                        (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c               ) seq          WHERE DATE_ADD(#{et.param1}, INTERVAL seq.seq DAY) BETWEEN #{et.param2} AND #{et.param3}      ) date_series          LEFT JOIN (     SELECT         r.UPDATE_TIME,         r.status,         tc.TEST_LIBRARY_ID     FROM run r              JOIN test_case tc ON r.CASE_ID = tc.ID     WHERE tc.TEST_LIBRARY_ID = #{et.param4} AND r.UPDATE_TIME BETWEEN #{et.param5} AND #{et.param6}       AND ((#{et.param7} IS NULL OR #{et.param8} = '') OR FIND_IN_SET(r.PLAN_ID, #{et.param9}))       AND ((#{et.param10} IS NULL OR #{et.param11} = '') OR FIND_IN_SET(r.EXECUTOR_ID, #{et.param12}))       AND ((#{et.param13} IS NULL OR #{et.param14} = '' OR #{et.param15} IS NULL OR #{et.param16} = '') OR r.EXECUTED_AT BETWEEN #{et.param17} and #{et.param18} )       AND ((#{et.param19} IS NULL OR #{et.param20} = '') OR FIND_IN_SET(r.STATUS, #{et.param21})) ) filtered_run_history ON DATE(filtered_run_history.UPDATE_TIME) = date_series.date GROUP BY date_series.date ORDER BY date_series.date; ";
                        java.util.List<JSONObject> entities=iBzSysRunDefaultService.select(strSql,param);//SQL调用
                            if(entities.size()>0){
                            JSONObject entity=entities.get(0);
                                runrun_daily_tendenciesresult.putAll(entity);
                            }
                        update(runrun_daily_tendenciesdefault);//更新fact中变量值
                        update(runrun_daily_tendenciesresult);//更新fact中变量值
            end