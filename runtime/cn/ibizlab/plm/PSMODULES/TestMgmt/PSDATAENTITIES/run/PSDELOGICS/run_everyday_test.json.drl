package cn.ibizlab.plm.testmgmt.logic.runlogic.run_everyday_test;
        import java.util.Map;
        import java.util.HashMap;
        import com.alibaba.fastjson.JSONObject;
        import org.springframework.util.StringUtils;
        import org.springframework.util.ObjectUtils;
        import cn.ibizlab.plm.util.errors.BadRequestAlertException;
                global cn.ibizlab.plm.core.testmgmt.domain.run runrun_everyday_testdefault;
                global java.util.Map runrun_everyday_testresult;
        global cn.ibizlab.plm.core.testmgmt.service.IrunService iBzSysRunDefaultService;
        global cn.ibizlab.plm.util.security.AuthenticationUser curuser;


    no-loop

            //逻辑处理节点[开始]
            rule "begin"
            ruleflow-group "runrun_everyday_testbegin"
            when
            then
            end

            //逻辑处理节点[结束]
            rule "end1"
            ruleflow-group "runrun_everyday_testend1"
            when
            then
                        update(runrun_everyday_testdefault);//更新fact中变量值
                        update(runrun_everyday_testresult);//更新fact中变量值
            end

            //逻辑处理节点[每日测试次数统计]
            rule "rawsqlcall1"
            ruleflow-group "runrun_everyday_testrawsqlcall1"
            when
            then
    Map param =new HashMap();
        param.put("param0",runrun_everyday_testdefault.get("n_create_time_gtandeq"));
        param.put("param1",runrun_everyday_testdefault.get("n_create_time_gtandeq"));
        param.put("param2",runrun_everyday_testdefault.get("n_create_time_gtandeq"));
        param.put("param3",runrun_everyday_testdefault.get("n_create_time_ltandeq"));
        param.put("param4",runrun_everyday_testdefault.get("n_test_library_id_eq"));
        param.put("param5",runrun_everyday_testdefault.get("n_create_time_gtandeq"));
        param.put("param6",runrun_everyday_testdefault.get("n_create_time_ltandeq"));
        param.put("param7",runrun_everyday_testdefault.get("n_plan_id_eq"));
        param.put("param8",runrun_everyday_testdefault.get("n_plan_id_eq"));
        param.put("param9",runrun_everyday_testdefault.get("n_plan_id_eq"));
        param.put("param10",runrun_everyday_testdefault.get("n_executor_id_eq"));
        param.put("param11",runrun_everyday_testdefault.get("n_executor_id_eq"));
        param.put("param12",runrun_everyday_testdefault.get("n_executor_id_eq"));
        param.put("param13",runrun_everyday_testdefault.get("n_executed_at_gtandeq"));
        param.put("param14",runrun_everyday_testdefault.get("n_executed_at_gtandeq"));
        param.put("param15",runrun_everyday_testdefault.get("n_executed_at_ltandeq"));
        param.put("param16",runrun_everyday_testdefault.get("n_executed_at_ltandeq"));
        param.put("param17",runrun_everyday_testdefault.get("n_executed_at_gtandeq"));
        param.put("param18",runrun_everyday_testdefault.get("n_executed_at_ltandeq"));
        param.put("param19",runrun_everyday_testdefault.get("n_status_eq"));
        param.put("param20",runrun_everyday_testdefault.get("n_status_eq"));
        param.put("param21",runrun_everyday_testdefault.get("n_status_eq"));
    String strSql="SELECT     date_series.date AS filter_type,     COALESCE(SUM(case_data.count), 0) AS count -- 每日测试次数统计 FROM (          SELECT DATE_ADD(#{et.param0}, INTERVAL seq.seq DAY) AS date          FROM (                   SELECT a.i + b.i * 10 + c.i * 100 AS seq                   FROM (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,                        (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,                        (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c               ) seq          WHERE DATE_ADD(#{et.param1}, INTERVAL seq.seq DAY) BETWEEN #{et.param2} AND #{et.param3}      ) date_series          LEFT JOIN (     SELECT         DATE(rh.CREATE_TIME) AS create_date,         COUNT(rh.ID) AS count     FROM run_history rh              JOIN run r ON rh.RUN_ID = r.ID              JOIN test_case ts ON r.CASE_ID = ts.ID     WHERE ts.TEST_LIBRARY_ID = #{et.param4} AND rh.CREATE_TIME BETWEEN #{et.param5} AND #{et.param6}       AND ((#{et.param7} IS NULL OR #{et.param8} = '') OR FIND_IN_SET(r.PLAN_ID, #{et.param9}))       AND ((#{et.param10} IS NULL OR #{et.param11} = '') OR FIND_IN_SET(r.EXECUTOR_ID, #{et.param12}))       AND ((#{et.param13} IS NULL OR #{et.param14} = '') OR (#{et.param15} IS NULL OR #{et.param16} = '') OR r.EXECUTED_AT BETWEEN #{et.param17} and #{et.param18} )       AND ((#{et.param19} IS NULL OR #{et.param20} = '') OR FIND_IN_SET(r.STATUS, #{et.param21}))     GROUP BY DATE(rh.CREATE_TIME) ) case_data ON date_series.date = case_data.create_date GROUP BY date_series.date ORDER BY date_series.date;";
                        java.util.List<JSONObject> entities=iBzSysRunDefaultService.select(strSql,param);//SQL调用
                            if(entities.size()>0){
                            JSONObject entity=entities.get(0);
                                runrun_everyday_testresult.putAll(entity);
                            }
                        update(runrun_everyday_testdefault);//更新fact中变量值
                        update(runrun_everyday_testresult);//更新fact中变量值
            end