<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:g="http://www.jboss.org/drools/flow/gpd" xmlns:tns="http://www.jboss.org/drools" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" expressionLanguage="http://www.mvel.org/2.0" id="Definition" name="" targetNamespace="http://www.jboss.org/drools" typeLanguage="http://www.java.com/javaTypes">
        <process id="cn.ibizlab.plm.core.base.service.logic.template_flowtest_plan_auto_set_state" isClosed="false" isExecutable="true" name="base_template_flow_test_plan_auto_set_state_ruleFlow" processType="Private" tns:packageName="cn.ibizlab.plm.core.base.service.logic.template_flowtest_plan_auto_set_state">
            <extensionElements>
                <tns:import name="java.util.Map" />
                <tns:import name="org.springframework.util.StringUtils"/>
                <tns:import name="cn.ibizlab.plm.util.helper.RuleUtils"/>
                                <tns:metaData express="" name="template_flowtest_plan_auto_set_statedefault" type="entity"/>
                                <tns:metaData express="new HashMap()" name="template_flowtest_plan_auto_set_statefinish_flag" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.run()" name="template_flowtest_plan_auto_set_staterunfilter" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.run()" name="template_flowtest_plan_auto_set_stateruns" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.run()" name="template_flowtest_plan_auto_set_statetemp_run" type="refentity"/>
                                <tns:metaData express="new cn.ibizlab.plm.core.testmgmt.domain.test_plan()" name="template_flowtest_plan_auto_set_statetest_plan" type="refentity"/>
                                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.testmgmt.service.Itest_planService))" name="test_planservice" type="service"/>
                                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.testmgmt.service.IrunService))" name="runservice" type="service"/>
                    <tns:metaData express="T(cn.ibizlab.plm.util.security.SpringContextHolder).getBean(T(cn.ibizlab.plm.core.base.service.Itemplate_flowService))" name="iBzSysTemplate_flowDefaultService" type="service"/>
                    <tns:metaData express="T(cn.ibizlab.plm.util.security.AuthenticationUser).getAuthenticationUser()" name="curuser" type="session"/>
                            <tns:global identifier="template_flowtest_plan_auto_set_statedefault" type="cn.ibizlab.plm.core.testmgmt.domain.run" />
                            <tns:global identifier="template_flowtest_plan_auto_set_staterunfilter" type="cn.ibizlab.plm.core.testmgmt.domain.run" />
                            <tns:global identifier="template_flowtest_plan_auto_set_stateruns" type="cn.ibizlab.plm.core.testmgmt.domain.run" />
                            <tns:global identifier="template_flowtest_plan_auto_set_statetemp_run" type="cn.ibizlab.plm.core.testmgmt.domain.run" />
                            <tns:global identifier="template_flowtest_plan_auto_set_statetest_plan" type="cn.ibizlab.plm.core.testmgmt.domain.test_plan" />
            </extensionElements>
                        <startEvent id="begin" isInterrupting="true"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateprepareparam1" id="prepareparam1" implementation="http://www.jboss.org/drools/rule" name="准备测试计划"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_statedeaction1" id="deaction1" implementation="http://www.jboss.org/drools/rule" name="获取执行用例对应的测试计划"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_statededataset1" id="dedataset1" implementation="http://www.jboss.org/drools/rule" name="获取计划下所有执行用例"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateprepareparam3" id="prepareparam3" implementation="http://www.jboss.org/drools/rule" name="初始化设置结束标识"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateloopsubcall1" id="loopsubcall1" implementation="http://www.jboss.org/drools/rule" name="循环计算执行用例"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateend2" id="end2" implementation="http://www.jboss.org/drools/rule" name="结束"/>
                        <endEvent id="end2_end" name="end"/>
                        <sequenceFlow id="end2_end_line" sourceRef="end2" targetRef="end2_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateprepareparam2" id="prepareparam2" implementation="http://www.jboss.org/drools/rule" name="存在未执行的用例设置结束变量为0"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateprepareparam4" id="prepareparam4" implementation="http://www.jboss.org/drools/rule" name="设置计划为已完成"/>
                        <endEvent id="prepareparam4_end" name="end"/>
                        <sequenceFlow id="prepareparam4_end_line" sourceRef="prepareparam4" targetRef="prepareparam4_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateprepareparam5" id="prepareparam5" implementation="http://www.jboss.org/drools/rule" name="设计计划为进行中"/>
                        <endEvent id="prepareparam5_end" name="end"/>
                        <sequenceFlow id="prepareparam5_end_line" sourceRef="prepareparam5" targetRef="prepareparam5_end"/>
                        <businessRuleTask activiti:exclusive="true" g:ruleFlowGroup="template_flowtest_plan_auto_set_stateend1" id="end1" implementation="http://www.jboss.org/drools/rule" name="结束"/>
                        <endEvent id="end1_end" name="end"/>
                        <sequenceFlow id="end1_end_line" sourceRef="end1" targetRef="end1_end"/>
                    <sequenceFlow id="begin_prepareparam1" sourceRef="begin" targetRef="prepareparam1">
                    </sequenceFlow>
                    <sequenceFlow id="prepareparam1_deaction1" sourceRef="prepareparam1" targetRef="deaction1">
                    </sequenceFlow>
                    <sequenceFlow id="deaction1_dedataset1" sourceRef="deaction1" targetRef="dedataset1">
                    </sequenceFlow>
                    <sequenceFlow id="dedataset1_prepareparam3" sourceRef="dedataset1" targetRef="prepareparam3">
                    </sequenceFlow>
                    <sequenceFlow id="prepareparam3_loopsubcall1" sourceRef="prepareparam3" targetRef="loopsubcall1">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall1_prepareparam2" sourceRef="gateway-loopsubcall1" targetRef="prepareparam2">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $template_flowtest_plan_auto_set_statedefault:run();
                                            $template_flowtest_plan_auto_set_statefinish_flag:Map();
                                            $template_flowtest_plan_auto_set_staterunfilter:run();
                                            $template_flowtest_plan_auto_set_stateruns:run();
                                            $template_flowtest_plan_auto_set_statetemp_run:run();
                                            $template_flowtest_plan_auto_set_statetest_plan:test_plan();
                                    eval($template_flowtest_plan_auto_set_statedefault==template_flowtest_plan_auto_set_statedefault && $template_flowtest_plan_auto_set_staterunfilter==template_flowtest_plan_auto_set_staterunfilter && $template_flowtest_plan_auto_set_stateruns==template_flowtest_plan_auto_set_stateruns && $template_flowtest_plan_auto_set_statetemp_run==template_flowtest_plan_auto_set_statetemp_run && $template_flowtest_plan_auto_set_statetest_plan==template_flowtest_plan_auto_set_statetest_plan);
                                eval((RuleUtils.test($template_flowtest_plan_auto_set_statetemp_run.get("status"),"ISNULL","")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall1_prepareparam4" sourceRef="gateway-loopsubcall1" targetRef="prepareparam4">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $template_flowtest_plan_auto_set_statedefault:run();
                                            $template_flowtest_plan_auto_set_statefinish_flag:Map();
                                            $template_flowtest_plan_auto_set_staterunfilter:run();
                                            $template_flowtest_plan_auto_set_stateruns:run();
                                            $template_flowtest_plan_auto_set_statetemp_run:run();
                                            $template_flowtest_plan_auto_set_statetest_plan:test_plan();
                                    eval($template_flowtest_plan_auto_set_statedefault==template_flowtest_plan_auto_set_statedefault && $template_flowtest_plan_auto_set_staterunfilter==template_flowtest_plan_auto_set_staterunfilter && $template_flowtest_plan_auto_set_stateruns==template_flowtest_plan_auto_set_stateruns && $template_flowtest_plan_auto_set_statetemp_run==template_flowtest_plan_auto_set_statetemp_run && $template_flowtest_plan_auto_set_statetest_plan==template_flowtest_plan_auto_set_statetest_plan);
                                eval((RuleUtils.test($template_flowtest_plan_auto_set_statefinish_flag.get(""),"EQ","1")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="gateway-loopsubcall1_prepareparam5" sourceRef="gateway-loopsubcall1" targetRef="prepareparam5">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $template_flowtest_plan_auto_set_statedefault:run();
                                            $template_flowtest_plan_auto_set_statefinish_flag:Map();
                                            $template_flowtest_plan_auto_set_staterunfilter:run();
                                            $template_flowtest_plan_auto_set_stateruns:run();
                                            $template_flowtest_plan_auto_set_statetemp_run:run();
                                            $template_flowtest_plan_auto_set_statetest_plan:test_plan();
                                    eval($template_flowtest_plan_auto_set_statedefault==template_flowtest_plan_auto_set_statedefault && $template_flowtest_plan_auto_set_staterunfilter==template_flowtest_plan_auto_set_staterunfilter && $template_flowtest_plan_auto_set_stateruns==template_flowtest_plan_auto_set_stateruns && $template_flowtest_plan_auto_set_statetemp_run==template_flowtest_plan_auto_set_statetemp_run && $template_flowtest_plan_auto_set_statetest_plan==template_flowtest_plan_auto_set_statetest_plan);
                                eval((RuleUtils.test($template_flowtest_plan_auto_set_statefinish_flag.get(""),"EQ","0"))&&(RuleUtils.test($template_flowtest_plan_auto_set_statetest_plan.get("status"),"EQ","pending")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                    <sequenceFlow id="loopsubcall1_end2" sourceRef="loopsubcall1" targetRef="end2">
                    </sequenceFlow>
                    <sequenceFlow id="gateway-prepareparam2_end1" sourceRef="gateway-prepareparam2" targetRef="end1">
                            <conditionExpression  language="http://www.jboss.org/drools/rule" ><![CDATA[
                                            $template_flowtest_plan_auto_set_statedefault:run();
                                            $template_flowtest_plan_auto_set_statefinish_flag:Map();
                                            $template_flowtest_plan_auto_set_staterunfilter:run();
                                            $template_flowtest_plan_auto_set_stateruns:run();
                                            $template_flowtest_plan_auto_set_statetemp_run:run();
                                            $template_flowtest_plan_auto_set_statetest_plan:test_plan();
                                    eval($template_flowtest_plan_auto_set_statedefault==template_flowtest_plan_auto_set_statedefault && $template_flowtest_plan_auto_set_staterunfilter==template_flowtest_plan_auto_set_staterunfilter && $template_flowtest_plan_auto_set_stateruns==template_flowtest_plan_auto_set_stateruns && $template_flowtest_plan_auto_set_statetemp_run==template_flowtest_plan_auto_set_statetemp_run && $template_flowtest_plan_auto_set_statetest_plan==template_flowtest_plan_auto_set_statetest_plan);
                                eval((RuleUtils.test($template_flowtest_plan_auto_set_statefinish_flag.get(""),"EQ","0")))
                                ]]>
                            </conditionExpression>
                    </sequenceFlow>
                            <exclusiveGateway id="gateway-loopsubcall1" name="Gateway" gatewayDirection="Diverging" default="gateway-loopsubcall1_end_line"></exclusiveGateway>
                            <sequenceFlow id="loopsubcall1_gateway-loopsubcall1_gatewayline" sourceRef="loopsubcall1" targetRef="gateway-loopsubcall1"></sequenceFlow>
                            <sequenceFlow id="gateway-loopsubcall1_end_line" sourceRef="gateway-loopsubcall1" targetRef="gateway-loopsubcall1_end"/>
                            <endEvent id="gateway-loopsubcall1_end" name="end"/>
                            <exclusiveGateway id="gateway-prepareparam2" name="Gateway" gatewayDirection="Diverging" default="gateway-prepareparam2_end_line"></exclusiveGateway>
                            <sequenceFlow id="prepareparam2_gateway-prepareparam2_gatewayline" sourceRef="prepareparam2" targetRef="gateway-prepareparam2"></sequenceFlow>
                            <sequenceFlow id="gateway-prepareparam2_end_line" sourceRef="gateway-prepareparam2" targetRef="gateway-prepareparam2_end"/>
                            <endEvent id="gateway-prepareparam2_end" name="end"/>
        </process>
    </definitions>