package cn.ibizlab.plm.projmgmt.logic.work_itemlogic.backlog_accumulate_flow;
        import java.util.Map;
        import java.util.HashMap;
        import com.alibaba.fastjson.JSONObject;
        import org.springframework.util.StringUtils;
        import org.springframework.util.ObjectUtils;
        import cn.ibizlab.plm.util.errors.BadRequestAlertException;
                global cn.ibizlab.plm.core.projmgmt.domain.work_item work_itembacklog_accumulate_flowdefault;
                global java.util.Map work_itembacklog_accumulate_flowresult;
        global cn.ibizlab.plm.core.projmgmt.service.Iwork_itemService iBzSysWork_itemDefaultService;
        global cn.ibizlab.plm.util.security.AuthenticationUser curuser;


    no-loop

            //逻辑处理节点[开始]
            rule "begin"
            ruleflow-group "work_itembacklog_accumulate_flowbegin"
            when
            then
            end

            //逻辑处理节点[结束]
            rule "end1"
            ruleflow-group "work_itembacklog_accumulate_flowend1"
            when
            then
                        update(work_itembacklog_accumulate_flowdefault);//更新fact中变量值
                        update(work_itembacklog_accumulate_flowresult);//更新fact中变量值
            end

            //逻辑处理节点[直接sql调用]
            rule "rawsqlcall1"
            ruleflow-group "work_itembacklog_accumulate_flowrawsqlcall1"
            when
            then
    Map param =new HashMap();
        param.put("param0",work_itembacklog_accumulate_flowdefault.get("n_create_time_gtandeq"));
        param.put("param1",work_itembacklog_accumulate_flowdefault.get("n_create_time_gtandeq"));
        param.put("param2",work_itembacklog_accumulate_flowdefault.get("n_create_time_gtandeq"));
        param.put("param3",work_itembacklog_accumulate_flowdefault.get("n_create_time_ltandeq"));
        param.put("param4",work_itembacklog_accumulate_flowdefault.get("n_project_id_eq"));
        param.put("param5",work_itembacklog_accumulate_flowdefault.get("n_project_id_eq"));
        param.put("param6",work_itembacklog_accumulate_flowdefault.get("n_work_item_type_id_eq"));
        param.put("param7",work_itembacklog_accumulate_flowdefault.get("n_work_item_type_id_eq"));
        param.put("param8",work_itembacklog_accumulate_flowdefault.get("n_work_item_type_id_eq"));
        param.put("param9",work_itembacklog_accumulate_flowdefault.get("n_is_archived_in"));
        param.put("param10",work_itembacklog_accumulate_flowdefault.get("n_is_archived_in"));
        param.put("param11",work_itembacklog_accumulate_flowdefault.get("n_is_archived_in"));
    String strSql="SELECT     date_series.date AS filter_type,     SUM(CASE WHEN wi.STATE_TYPE = 'pending' THEN 1 ELSE 0 END) AS count,     SUM(CASE WHEN wi.STATE_TYPE = 'in_progress' THEN 1 ELSE 0 END) AS count1,     SUM(CASE WHEN wi.STATE_TYPE = 'completed' THEN 1 ELSE 0 END) AS count2 FROM (     SELECT DATE_ADD(#{et.param0}, INTERVAL seq.seq DAY) AS date     FROM (         SELECT a.i + b.i * 10 + c.i * 100 AS seq         FROM         (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,         (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,         (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c     ) seq     WHERE DATE_ADD(#{et.param1}, INTERVAL seq.seq DAY) BETWEEN #{et.param2} AND #{et.param3} ) date_series LEFT JOIN (     SELECT         t1.`CREATE_TIME`,         t31.`TYPE` AS `STATE_TYPE`     FROM `WORK_ITEM` t1     LEFT JOIN `WORK_ITEM_TYPE` t21 ON t1.`WORK_ITEM_TYPE_ID` = t21.`ID`     LEFT JOIN `WORK_ITEM_STATE` t31 ON t1.`STATE` = t31.`ID`     WHERE         t21.`GROUP` = 'requirement'         AND t1.`IS_DELETED` = 0         AND t1.`PROJECT_ID` = #{et.param4}         AND t1.`CREATE_TIME` <= #{et.param5}         AND ((#{et.param6} IS NULL OR #{et.param7} = '') OR FIND_IN_SET(t1.WORK_ITEM_TYPE_ID, #{et.param8}))         AND ((#{et.param9} IS NULL OR #{et.param10} = '') OR FIND_IN_SET(t1.IS_ARCHIVED, #{et.param11})) ) wi ON wi.CREATE_TIME <= date_series.date GROUP BY     date_series.date ORDER BY     date_series.date ASC; ";
                        java.util.List<JSONObject> entities=iBzSysWork_itemDefaultService.select(strSql,param);//SQL调用
                            if(entities.size()>0){
                            JSONObject entity=entities.get(0);
                                work_itembacklog_accumulate_flowresult.putAll(entity);
                            }
                        update(work_itembacklog_accumulate_flowdefault);//更新fact中变量值
                        update(work_itembacklog_accumulate_flowresult);//更新fact中变量值
            end