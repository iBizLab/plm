package cn.ibizlab.plm.projmgmt.logic.work_itemlogic.backlog_age_report;
        import java.util.Map;
        import java.util.HashMap;
        import com.alibaba.fastjson.JSONObject;
        import org.springframework.util.StringUtils;
        import org.springframework.util.ObjectUtils;
        import cn.ibizlab.plm.util.errors.BadRequestAlertException;
                global cn.ibizlab.plm.core.projmgmt.domain.work_item work_itembacklog_age_reportdefault;
                global java.util.Map work_itembacklog_age_reportresult;
        global cn.ibizlab.plm.core.projmgmt.service.Iwork_itemService iBzSysWork_itemDefaultService;
        global cn.ibizlab.plm.util.security.AuthenticationUser curuser;


    no-loop

            //逻辑处理节点[开始]
            rule "begin"
            ruleflow-group "work_itembacklog_age_reportbegin"
            when
            then
            end

            //逻辑处理节点[结束]
            rule "end1"
            ruleflow-group "work_itembacklog_age_reportend1"
            when
            then
                        update(work_itembacklog_age_reportdefault);//更新fact中变量值
                        update(work_itembacklog_age_reportresult);//更新fact中变量值
            end

            //逻辑处理节点[直接sql调用]
            rule "rawsqlcall1"
            ruleflow-group "work_itembacklog_age_reportrawsqlcall1"
            when
            then
    Map param =new HashMap();
        param.put("param0",work_itembacklog_age_reportdefault.get("n_project_id_eq"));
        param.put("param1",work_itembacklog_age_reportdefault.get("n_board_id_eq"));
        param.put("param2",work_itembacklog_age_reportdefault.get("n_board_id_eq"));
        param.put("param3",work_itembacklog_age_reportdefault.get("n_board_id_eq"));
        param.put("param4",work_itembacklog_age_reportdefault.get("n_create_time_gtandeq"));
        param.put("param5",work_itembacklog_age_reportdefault.get("n_create_time_gtandeq"));
        param.put("param6",work_itembacklog_age_reportdefault.get("n_create_time_ltandeq"));
        param.put("param7",work_itembacklog_age_reportdefault.get("n_create_time_ltandeq"));
        param.put("param8",work_itembacklog_age_reportdefault.get("n_create_time_gtandeq"));
        param.put("param9",work_itembacklog_age_reportdefault.get("n_create_time_ltandeq"));
        param.put("param10",work_itembacklog_age_reportdefault.get("n_backlog_type_eq"));
        param.put("param11",work_itembacklog_age_reportdefault.get("n_backlog_type_eq"));
        param.put("param12",work_itembacklog_age_reportdefault.get("n_backlog_type_eq"));
        param.put("param13",work_itembacklog_age_reportdefault.get("n_priority_eq"));
        param.put("param14",work_itembacklog_age_reportdefault.get("n_priority_eq"));
        param.put("param15",work_itembacklog_age_reportdefault.get("n_priority_eq"));
        param.put("param16",work_itembacklog_age_reportdefault.get("n_backlog_from_eq"));
        param.put("param17",work_itembacklog_age_reportdefault.get("n_backlog_from_eq"));
        param.put("param18",work_itembacklog_age_reportdefault.get("n_backlog_from_eq"));
        param.put("param19",work_itembacklog_age_reportdefault.get("n_is_archived_in"));
        param.put("param20",work_itembacklog_age_reportdefault.get("n_is_archived_in"));
        param.put("param21",work_itembacklog_age_reportdefault.get("n_is_archived_in"));
        param.put("param22",work_itembacklog_age_reportdefault.get("n_is_deleted_in"));
        param.put("param23",work_itembacklog_age_reportdefault.get("n_is_deleted_in"));
        param.put("param24",work_itembacklog_age_reportdefault.get("n_is_deleted_in"));
    String strSql="SELECT     time_ranges.filter_type,     COALESCE(SUM(count), 0) AS count FROM (          SELECT '10' AS filter_type UNION ALL          SELECT '20' UNION ALL          SELECT '30' UNION ALL          SELECT '40' UNION ALL          SELECT '50' UNION ALL          SELECT '60' UNION ALL          SELECT '70'      ) AS time_ranges          LEFT JOIN (     SELECT         CASE             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 1 THEN '10'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 1 AND TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 2 THEN '20'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 2 AND TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 5 THEN '30'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 5 AND TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 7 THEN '40'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 7 AND TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 15 THEN '50'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 15 AND TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) <= 30 THEN '60'             WHEN TIMESTAMPDIFF(DAY, T1.CREATE_TIME, NOW()) > 30 THEN '70'             ELSE NULL             END AS filter_type,         COUNT(*) AS count     FROM work_item T1     INNER JOIN work_item_type T2 ON T1.WORK_ITEM_TYPE_ID = T2.ID     WHERE T1.UPDATE_TIME IS NOT NULL and T2.`GROUP` = 'requirement'       AND T1.PROJECT_ID = #{et.param0}       AND ((#{et.param1} IS NULL OR #{et.param2} = '') OR T1.BOARD_ID = #{et.param3})  -- 看板       AND ((#{et.param4} IS NULL OR #{et.param5} = '' OR #{et.param6} IS NULL OR #{et.param7} = '') OR T1.CREATE_TIME BETWEEN #{et.param8} AND #{et.param9}) -- 创建时间范围       AND ((#{et.param10} IS NULL OR #{et.param11} = '') OR FIND_IN_SET(T1.BACKLOG_TYPE, #{et.param12})) -- 需求类型       AND ((#{et.param13} IS NULL OR #{et.param14} = '') OR FIND_IN_SET(T1.PRIORITY, #{et.param15})) -- 优先级       AND ((#{et.param16} IS NULL OR #{et.param17} = '') OR FIND_IN_SET(T1.BACKLOG_FROM, #{et.param18})) -- 需求来源       AND ((#{et.param19} IS NULL OR #{et.param20} = '') OR FIND_IN_SET(T1.IS_ARCHIVED, #{et.param21})) -- 是否归档       AND ((#{et.param22} IS NULL OR #{et.param23} = '') OR FIND_IN_SET(T1.IS_DELETED, #{et.param24})) -- 是否删除     GROUP BY filter_type ) AS T1 ON T1.filter_type = time_ranges.filter_type GROUP BY time_ranges.filter_type ORDER BY time_ranges.filter_type ASC;";
                        java.util.List<JSONObject> entities=iBzSysWork_itemDefaultService.select(strSql,param);//SQL调用
                            if(entities.size()>0){
                            JSONObject entity=entities.get(0);
                                work_itembacklog_age_reportresult.putAll(entity);
                            }
                        update(work_itembacklog_age_reportdefault);//更新fact中变量值
                        update(work_itembacklog_age_reportresult);//更新fact中变量值
            end